"""MatPlotLib Theme implementation.

Provides a base class for MatPlotLib themes used in SimpleBench graphs.
"""
from __future__ import annotations
from typing import Any

from matplotlib import RcParams

from simplebench.exceptions import SimpleBenchNotImplementedError
from .exceptions import ThemeErrorTag


class Theme(RcParams):
    """An immutable MatPlotLib base theme class for the graphs.

    This is a subclass of matplotlib.RcParams that represents a theme for Matplotlib graphs.
    It can be used to define custom styles for Matplotlib graphs generated by SimpleBench.

    See https://matplotlib.org/stable/tutorials/introductory/customizing.html
    for more information on customizing Matplotlib themes.
    """
    def __init__(self, rcparams: dict[str, Any] | None = None) -> None:
        """Initialize a Theme instance.

        Args:
            rcparams (dict[str, Any] | None): The rcParams to use for the theme.
                If None, the default Matplotlib rcParams will be used.
        """
        self._immutable: bool = False
        if rcparams is None:
            rcparams = {}
        super().__init__(rcparams)
        self._immutable = True

    def __setitem__(self, key: str, value: Any) -> None:
        """Set an item in the Theme.

        This thin wrapper prevents modification of the Theme after initialization.

        It is required to maintain the immutability of the Theme instance because the
        underlying RcParams class allows item modification (and requires it for initialization).

        Args:
            key (str): The key to set.
            value (Any): The value to set.

        Raises:
            SimpleBenchNotImplementedError: If attempting to modify the Theme after initialization.
        """
        if self._immutable:
            raise SimpleBenchNotImplementedError("Cannot modify items in a Theme.",
                                                 tag=ThemeErrorTag.THEME_IMMUTABLE)
        super().__setitem__(key, value)

    def __delitem__(self, key: str) -> None:
        """Delete an item from the Theme.

        This thin wrapper prevents deletion of items from the Theme after initialization.

        It is required to maintain the immutability of the Theme instance because the
        underlying RcParams class allows item deletion.

        Args:
            key (str): The key to delete.
        Raises:
            SimpleBenchNotImplementedError: If attempting to delete an item from the Theme after initialization.
        """
        if self._immutable:
            raise SimpleBenchNotImplementedError("Cannot delete items from a Theme.",
                                                 tag=ThemeErrorTag.THEME_IMMUTABLE)
        super().__delitem__(key)

    def replace(self, rcparams: dict[str, Any]) -> Theme:
        """Replace some parameters in the theme and return a new Theme instance
        without modifying the current instance.

        Example:
            new_theme = old_theme.replace({'axes.grid': False, 'figure.dpi': 200})

        Args:
            rcparams (dict[str, Any]): The new rcParams to use for the theme.

        Returns:
            Theme: A new Theme instance with the updated rcParams.
        """
        new_params = self.copy()
        new_params.update(rcparams)
        return Theme(new_params)
