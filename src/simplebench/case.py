# -*- coding: utf-8 -*-
"""Benchmark case declaration and execution."""
from __future__ import annotations
import inspect
import itertools
from typing import Any, Optional, TYPE_CHECKING, get_type_hints

from .constants import DEFAULT_ITERATIONS, DEFAULT_WARMUP_ITERATIONS, DEFAULT_MIN_TIME, DEFAULT_MAX_TIME
from .exceptions import (SimpleBenchValueError, SimpleBenchTypeError, SimpleBenchAttributeError,
                         SimpleBenchRuntimeError, ErrorTag)
from .metaclasses import ICase
from .protocols import ActionRunner, ReporterCallback
from .reporters.reporter_option import ReporterOption
from .results import Results
from .runners import SimpleRunner
from .enums import Section, Format


if TYPE_CHECKING:
    from .session import Session
    from .tasks import RichTask


class Case(ICase):
    '''Declaration of a benchmark case.

    Args:
        group (str): The benchmark reporting group to which the benchmark case belongs.
        title (str): The name of the benchmark case.
        description (str): A brief description of the benchmark case.
        action (ActionRunner): The function to perform the benchmark. This function must
            accept a `bench` parameter of type SimpleRunner and arbitrary keyword arguments ('**kwargs').
            It must return a Results object.
        iterations (int): The minimum number of iterations to run for the benchmark.
            (default: 20 - DEFAULT_ITERATIONS)
        warmup_iterations (int): The number of warmup iterations to run before the benchmark.
            (default: 10 - DEFAULT_WARMUP_ITERATIONS)
        min_time (float): The minimum time for the benchmark in seconds.
            (default: 5.0 seconds - DEFAULT_MIN_TIME)
        max_time (float): The maximum time for the benchmark in seconds.
            (default: 20.0 seconds - DEFAULT_MAX_TIME)
        variation_cols (dict[str, str]): kwargs to be used for cols to denote kwarg variations.
            Each key is a keyword argument name, and the value is the column label to use for that argument.

            .. code-block:: python
                # example of variation_cols
                variation_cols={
                    'search_depth': 'Search Depth',
                    'runtime_validation': 'Runtime Validation'
                }
        kwargs_variations (dict[str, list[Any]]):
            Variations of keyword arguments for the benchmark.
            Each key is a keyword argument name, and the value is a list of possible values.

            .. code-block:: python
                # example of kwargs_variations
                kwargs_variations={
                    'search_depth': [1, 2, 3],
                    'runtime_validation': [True, False]
                }
        runner (Optional[SimpleRunner]): A custom runner for the benchmark.
            If None, the default SimpleRunner is used. (default: None)

            The custom runner must be a subclass of SimpleRunner and must have a method
            named `run` that accepts the same parameters as SimpleRunner.run and returns a Results object.

            The action function will be called with a `bench` parameter that is an instance of the
            custom runner.

            It may also accept additional parameters to the run method as needed. If additional
            parameters are needed for the custom runner, they will need to be passed to the run
            method from the action function when using a directly defined Case.

            No support is provided for passing additional parameters to a custom runner from the @benchmark
            decorator.

        callback (ReporterCallback):
            A callback function for additional processing of the report. The function should accept
            four arguments: the Case instance, the Section, the Format, and the generated report data.
            Leave as None if no callback is needed. (default: None)

            The callback function will be called with the following arguments:
                case (Case): The `Case` instance processed for the report.
                section (Section): The `Section` of the report.
                output_format (Format): The `Format` of the report.
                output (Any): The generated report data. Note that the actual type of this data will
                    depend on the Format specified for the report and the type generated by the
                    reporter for that Format
        options (list[ReporterOption]): A list of additional options for the benchmark case.

            Each option is an instance of ReporterOption or a subclass of ReporterOption.
            Reporter options can be used to customize the output of the benchmark reports for
            specific reporters. Reporters are responsible for extracting applicable ReporterOptions
            from the list of options themselves. (default: [])
        _decoration (bool): This field is used internally to indicate if a Case was created via
            a benchmark decorator. It should not be set manually. (default: False)
    Properties:
        results (list[Results]): The benchmark results for the case.
    '''
    __slots__ = ('_group', '_title', '_description', '_action',
                 '_iterations', '_warmup_iterations', '_min_time', '_max_time',
                 '_variation_cols', '_kwargs_variations', '_runner',
                 '_callback', '_results', '_options', '_readonly')

    def __init__(self, *,
                 group: str,
                 title: str,
                 description: str,
                 action: ActionRunner,
                 iterations: int = DEFAULT_ITERATIONS,
                 warmup_iterations: int = DEFAULT_WARMUP_ITERATIONS,
                 min_time: float = DEFAULT_MIN_TIME,
                 max_time: float = DEFAULT_MAX_TIME,
                 variation_cols: Optional[dict[str, str]] = None,
                 kwargs_variations: Optional[dict[str, list[Any]]] = None,
                 runner: Optional[type[SimpleRunner]] = None,
                 callback: Optional[ReporterCallback] = None,
                 options: Optional[list[ReporterOption]] = None) -> None:
        """Constructor for Case.

        Args:
            group (str): The benchmark reporting group to which the benchmark case belongs.
            title (str): The name of the benchmark case.
            description (str): A brief description of the benchmark case.
            action (Callable[..., Results]): The function to perform the benchmark. This function must
                accept a `bench` parameter of type SimpleRunner and arbitrary keyword arguments ('**kwargs').
                It must return a Results object.
            iterations (int): The minimum number of iterations to run for the benchmark.
                (default: 20 - DEFAULT_ITERATIONS)
            warmup_iterations (int): The number of warmup iterations to run before the benchmark.
                (default: 10 - DEFAULT_WARMUP_ITERATIONS)
            min_time (float): The minimum time for the benchmark in seconds.
                (default: 5.0 seconds - DEFAULT_MIN_TIME)
            max_time (float): The maximum time for the benchmark in seconds.
                (default: 20.0 seconds - DEFAULT_MAX_TIME)
            variation_cols (dict[str, str]): kwargs to be used for cols to denote kwarg variations.
                Each key is a keyword argument name, and the value is the column label to use for that argument.
                (default: None)
            kwargs_variations (dict[str, list[Any]]):
                Variations of keyword arguments for the benchmark.
                Each key is a keyword argument name, and the value is a list of possible values.
                (default: None)
            runner (Optional[type[SimpleRunner]]): A custom runner class for the benchmark.
                If None, the default SimpleRunner is used. (default: None)
                The custom runner class must be a subclass of SimpleRunner and must have a method
                named `run` that accepts the same parameters as SimpleRunner.run and returns a Results object.
                The action function will be called with a `bench` parameter that is an instance of the
                custom runner.
                It may also accept additional parameters to the run method as needed. If additional
                parameters are needed for the custom runner, they will need to be passed to the run
                method as keyword arguments.
                No support is provided for passing additional parameters to a custom runner from the @benchmark
                decorator.
            callback (ReporterCallback):
                A callback function for additional processing of the report. The function should accept
                four arguments: the Case instance, the Section, the Format, and the generated report data.
                Leave as None if no callback is needed. (default: None)
                The callback function will be called with the following arguments:
                    case (Case): The `Case` instance processed for the report.
                    section (Section): The `Section` of the report.
                    output_format (Format): The `Format` of the report.
                    output (Any): The generated report data. Note that the actual type of this data will
                        depend on the Format specified for the report and the type generated by the
                        reporter for that Format
            options (list[ReporterOption]): A list of additional options for the benchmark case.
                Each option is an instance of ReporterOption or a subclass of ReporterOption.
                Reporter options can be used to customize the output of the benchmark reports for
                specific reporters. Reporters are responsible for extracting applicable ReporterOptions
                from the list of options themselves. (default: [])
        """
        self._readonly: bool = False  # Allow setting parameters during initialization
        self.group = group
        self.title = title
        self.description = description
        self.action = action
        self.iterations = iterations
        self.warmup_iterations = warmup_iterations
        self.min_time = min_time
        self.max_time = max_time
        self.kwargs_variations = kwargs_variations if kwargs_variations is not None else {}
        self.variation_cols = variation_cols if variation_cols is not None else {}
        self.runner = runner
        self.callback = callback
        self.options = options if options is not None else []
        self._results: list[Results] = []  # No setter validation needed here
        self._readonly = True
        self.validate_time_range()

    @property
    def group(self) -> str:
        """The benchmark reporting group to which the benchmark case belongs."""
        return self._group

    @group.setter
    def group(self, value: str) -> None:
        if self._readonly:
            raise SimpleBenchAttributeError(
                'group attribute is read-only.',
                name='group', obj=self, tag=ErrorTag.CASE_MODIFY_READONLY_GROUP)

        if not isinstance(value, str):
            raise SimpleBenchTypeError(
                f'Invalid group type: {type(value)}. Must be a string.',
                tag=ErrorTag.CASE_INVALID_GROUP_TYPE
            )
        if not value.strip():
            raise SimpleBenchValueError(
                'Invalid group: cannot be empty or whitespace.',
                tag=ErrorTag.CASE_INVALID_GROUP_VALUE
                )
        self._group = value.strip()

    @property
    def title(self) -> str:
        """The name of the benchmark case."""
        return self._title

    @title.setter
    def title(self, value: str) -> None:
        if self._readonly:
            raise SimpleBenchAttributeError(
                'title attribute is read-only.',
                name='title', obj=self, tag=ErrorTag.CASE_MODIFY_READONLY_TITLE)
        if not isinstance(value, str):
            raise SimpleBenchTypeError(
                f'Invalid title type: {type(value)}. Must be a string.',
                tag=ErrorTag.CASE_INVALID_TITLE_TYPE
                )
        if not value.strip():
            raise SimpleBenchValueError(
                'Invalid title: cannot be empty or whitespace.',
                tag=ErrorTag.CASE_INVALID_TITLE_VALUE
                )
        self._title = value.strip()

    @property
    def description(self) -> str:
        """A brief description of the benchmark case."""
        return self._description

    @description.setter
    def description(self, value: str) -> None:
        if self._readonly:
            raise SimpleBenchAttributeError(
                'description attribute is read-only.',
                name='description', obj=self, tag=ErrorTag.CASE_MODIFY_READONLY_DESCRIPTION)
        if not isinstance(value, str):
            raise SimpleBenchTypeError(
                f'Invalid description type: {type(value)}. Must be a string.',
                tag=ErrorTag.CASE_INVALID_DESCRIPTION_TYPE
                )
        if not value.strip():
            raise SimpleBenchValueError(
                'Invalid description: cannot be empty or whitespace.',
                tag=ErrorTag.CASE_INVALID_DESCRIPTION_VALUE
                )
        self._description = value.strip()

    @property
    def action(self) -> ActionRunner:
        """The function to perform the benchmark.

        The function must accept a `bench` parameter of type SimpleRunner and
        arbitrary keyword arguments ('**kwargs') and return a Results object.

        Example:
        .. code-block:: python

            def my_benchmark_action(*, bench: SimpleRunner, **kwargs) -> Results:
                def setup_function(size: int) -> None:
                    # Setup code goes here
                    pass

                def teardown_function(size: int) -> None:
                    # Teardown code goes here
                    pass

                def action_function(size: int) -> None:
                    # The code to benchmark goes here
                    lst = list(range(size))

                # Perform the benchmark using the provided SimpleRunner instance
                results: Results = bench.run(
                    n=kwargs.get('size', 1),
                    setup=setup_function, teardown=teardown_function,
                    action=action_function, **kwargs)
                return results

        Args:
            action (ActionRunner): The benchmark action function.
            **kwargs: Arbitrary keyword arguments to be passed to the action function.

        Returns:
            A Results object containing the benchmark results.

        Raises:
            SimpleBenchTypeError: If the action is not callable.
            SimpleBenchValueError: If the action does not have the correct signature.

        """
        return self._action

    @action.setter
    def action(self, value: ActionRunner) -> None:
        if self._readonly:
            raise SimpleBenchAttributeError(
                'action attribute is read-only.',
                name='action', obj=self, tag=ErrorTag.CASE_MODIFY_READONLY_ACTION
            )
        if not callable(value):
            raise SimpleBenchTypeError(
                f'Invalid action: {value}. Must be a callable.',
                tag=ErrorTag.CASE_INVALID_ACTION_NOT_CALLABLE
                )
        action_signature = inspect.signature(value)
        if 'bench' not in action_signature.parameters:
            raise SimpleBenchTypeError(
                f'Invalid action: {value}. Must accept a "bench" parameter.',
                tag=ErrorTag.CASE_INVALID_ACTION_MISSING_BENCH_PARAMETER
                )
        kwargs_param = action_signature.parameters.get('kwargs')
        if kwargs_param is None or kwargs_param.kind not in (inspect.Parameter.VAR_KEYWORD,):
            raise SimpleBenchTypeError(
                f'Invalid action: {value}. Must accept "**kwargs" parameter.',
                tag=ErrorTag.CASE_INVALID_ACTION_MISSING_KWARGS_PARAMETER
                )
        if len(action_signature.parameters) != 2:
            raise SimpleBenchValueError(
                f'Invalid action: {value}. Must accept exactly 2 parameters: bench and **kwargs.',
                tag=ErrorTag.CASE_INVALID_ACTION_PARAMETER_COUNT
            )
        self._action = value

    @property
    def iterations(self) -> int:
        '''The number of iterations to run for the benchmark.'''
        return self._iterations

    @iterations.setter
    def iterations(self, value: int) -> None:
        if self._readonly:
            raise SimpleBenchAttributeError(
                'iterations attribute is read-only.',
                name='iterations', obj=self, tag=ErrorTag.CASE_MODIFY_READONLY_ITERATIONS
            )
        if not isinstance(value, int):
            raise SimpleBenchTypeError(
                f'Invalid iterations type: {type(value)}. Must be an integer.',
                tag=ErrorTag.CASE_INVALID_ITERATIONS_TYPE
                )
        if value <= 0:
            raise SimpleBenchValueError(
                f'Invalid iterations: {value}. Must be a positive integer.',
                tag=ErrorTag.CASE_INVALID_ITERATIONS_VALUE
                )
        self._iterations = value

    @property
    def warmup_iterations(self) -> int:
        '''The number of warmup iterations to run before the benchmark.'''
        return self._warmup_iterations

    @warmup_iterations.setter
    def warmup_iterations(self, value: int) -> None:
        if self._readonly:
            raise SimpleBenchAttributeError(
                'warmup_iterations attribute is read-only.',
                name='warmup_iterations', obj=self, tag=ErrorTag.CASE_MODIFY_READONLY_WARMUP_ITERATIONS
            )
        if not isinstance(value, int):
            raise SimpleBenchTypeError(
                f'Invalid warmup_iterations type: {type(value)}. Must be an integer.',
                tag=ErrorTag.CASE_INVALID_WARMUP_ITERATIONS_TYPE
                )
        if value < 0:
            raise SimpleBenchValueError(
                f'Invalid warmup_iterations: {value}. Must be a non-negative integer.',
                tag=ErrorTag.CASE_INVALID_WARMUP_ITERATIONS_VALUE
            )
        self._warmup_iterations = value

    @property
    def min_time(self) -> float:
        '''The minimum time for the benchmark in seconds.'''
        return self._min_time

    @min_time.setter
    def min_time(self, value: float) -> None:
        if self._readonly:
            raise SimpleBenchAttributeError(
                'min_time attribute is read-only.',
                name='min_time', obj=self, tag=ErrorTag.CASE_MODIFY_READONLY_MIN_TIME
            )
        if not isinstance(value, float):
            raise SimpleBenchTypeError(
                f'Invalid min_time type: {type(value)}. Must be a float.',
                tag=ErrorTag.CASE_INVALID_MIN_TIME_TYPE
                )
        if value <= 0.0:
            raise SimpleBenchValueError(
                f'Invalid min_time: {value}. Must be a positive float.',
                tag=ErrorTag.CASE_INVALID_MIN_TIME_VALUE
                )
        self._min_time = value

    @property
    def max_time(self) -> float:
        '''The maximum time for the benchmark in seconds.'''
        return self._max_time

    @max_time.setter
    def max_time(self, value: float) -> None:
        if self._readonly:
            raise SimpleBenchAttributeError(
                'max_time attribute is read-only.',
                name='max_time', obj=self, tag=ErrorTag.CASE_MODIFY_READONLY_MAX_TIME
            )
        if not isinstance(value, float):
            raise SimpleBenchTypeError(
                f'Invalid max_time type: {type(value)}. Must be a float.',
                tag=ErrorTag.CASE_INVALID_MAX_TIME_TYPE
                )
        if value <= 0.0:
            raise SimpleBenchValueError(
                f'Invalid max_time: {value}. Must be a positive float.',
                tag=ErrorTag.CASE_INVALID_MAX_TIME_VALUE
                )
        self._max_time = value

    @property
    def variation_cols(self) -> dict[str, str]:
        '''Keyword arguments to be used for columns to denote kwarg variations.

        Note that all keys in variation_cols must be present in kwargs_variations and
        updating it may require changes to both variation_cols and kwargs_variations_cols.

        Updating variation_cols does not automatically update kwargs_variations, and vice versa.

        Returns:
            A dictionary mapping keyword argument names to column labels.

        Each key is a keyword argument name, and the value is the column label to use for that argument.
        '''
        return self._variation_cols if self._variation_cols is not None else {}

    @variation_cols.setter
    def variation_cols(self, value: dict[str, str]) -> None:
        if self._readonly:
            raise SimpleBenchAttributeError(
                'variation_cols attribute is read-only.',
                name='variation_cols', obj=self, tag=ErrorTag.CASE_MODIFY_READONLY_VARIATION_COLS
            )
        if not isinstance(value, dict):
            raise SimpleBenchTypeError(
                f'Invalid variation_cols: {value}. Must be a dictionary.',
                tag=ErrorTag.CASE_INVALID_VARIATION_COLS_NOT_DICT
                )
        for key, vc_value in value.items():
            if key not in self.kwargs_variations:
                raise SimpleBenchValueError(
                    f'Invalid variation_cols entry key: {key}. Key not found in kwargs_variations.',
                    tag=ErrorTag.CASE_INVALID_VARIATION_COLS_ENTRY_KEY_NOT_IN_KWARGS)
            if not isinstance(vc_value, str):
                raise SimpleBenchTypeError(
                    f'Invalid variation_cols entry value for entry "{key}": "{vc_value}". Values must be of type str.',
                    tag=ErrorTag.CASE_INVALID_VARIATION_COLS_ENTRY_VALUE_NOT_STRING
                    )
            if vc_value.strip() == '':
                raise SimpleBenchValueError(
                    f'Invalid variation_cols entry value: "{vc_value}". Values cannot be blank strings.',
                    tag=ErrorTag.CASE_INVALID_VARIATION_COLS_ENTRY_VALUE_BLANK
                    )
        self._variation_cols = value

    @property
    def kwargs_variations(self) -> dict[str, list[Any]]:
        '''Variations of keyword arguments for the benchmark.'''
        return self._kwargs_variations if self._kwargs_variations is not None else {}

    @kwargs_variations.setter
    def kwargs_variations(self, value: dict[str, list[Any]]) -> None:
        if self._readonly:
            raise SimpleBenchAttributeError(
                'kwargs_variations attribute is read-only.',
                name='kwargs_variations', obj=self, tag=ErrorTag.CASE_MODIFY_READONLY_KWARGS_VARIATIONS
            )
        if not isinstance(value, dict):
            raise SimpleBenchTypeError(
                f'Invalid kwargs_variations: {value}. Must be a dictionary.',
                tag=ErrorTag.CASE_INVALID_KWARGS_VARIATIONS_NOT_DICT
                )
        for key, kw_value in value.items():
            if not isinstance(key, str):
                raise SimpleBenchTypeError(
                    f'Invalid kwargs_variations entry key: {key}. Keys must be of type str.',
                    tag=ErrorTag.CASE_INVALID_KWARGS_VARIATIONS_ENTRY_KEY_TYPE
                    )
            if not key.isidentifier():
                raise SimpleBenchValueError(
                    f'Invalid kwargs_variations entry key: {key}. Keys must be valid Python identifiers.',
                    tag=ErrorTag.CASE_INVALID_KWARGS_VARIATIONS_ENTRY_KEY_NOT_IDENTIFIER
                    )
            if not isinstance(kw_value, list):
                raise SimpleBenchTypeError(
                    f'Invalid kwargs_variations entry value for entry "{key}": {kw_value}. Values must be in a list.',
                    tag=ErrorTag.CASE_INVALID_KWARGS_VARIATIONS_ENTRY_VALUE_NOT_LIST
                    )
            if not kw_value:
                raise SimpleBenchValueError(
                    (f'Invalid kwargs_variations entry value for entry "{key}": {kw_value}. '
                     'Values cannot be empty lists.'),
                    tag=ErrorTag.CASE_INVALID_KWARGS_VARIATIONS_ENTRY_VALUE_EMPTY_LIST
                    )
        self._kwargs_variations = value

    @property
    def runner(self) -> Optional[type[SimpleRunner]]:
        '''A custom runner for the benchmark. If None, the default SimpleRunner is used.'''
        return self._runner

    @runner.setter
    def runner(self, value: Optional[type[SimpleRunner]]) -> None:
        if self._readonly:
            raise SimpleBenchAttributeError(
                'runner attribute is read-only.',
                name='runner', obj=self, tag=ErrorTag.CASE_MODIFY_READONLY_RUNNER
            )
        if value is not None and not issubclass(value, SimpleRunner):
            raise SimpleBenchTypeError(
                f'Invalid runner: {value}. Must be a subclass of SimpleRunner.',
                tag=ErrorTag.CASE_INVALID_RUNNER_NOT_SIMPLE_RUNNER_SUBCLASS
                )
        self._runner = value

    @property
    def callback(self) -> Optional[ReporterCallback]:
        '''A callback function for additional processing of a report.'''
        return self._callback

    @callback.setter
    def callback(self, value: Optional[ReporterCallback]) -> None:
        if self._readonly:
            raise SimpleBenchAttributeError(
                'callback attribute is read-only.',
                name='callback', obj=self, tag=ErrorTag.CASE_MODIFY_READONLY_CALLBACK
            )

        if value is not None:
            if not callable(value):
                raise SimpleBenchTypeError(
                    f'Invalid callback: {value}. Must be a callable or None.',
                    tag=ErrorTag.CASE_INVALID_CALLBACK_NOT_CALLABLE_OR_NONE)

            try:
                resolved_hints = get_type_hints(
                    value, globalns=value.__globals__)  # pyright: ignore[reportAttributeAccessIssue]
            except (NameError, TypeError) as e:
                # This can happen if an annotation refers to a type that doesn't exist.
                raise SimpleBenchTypeError(
                    f"Invalid callback: {value}. Could not resolve type hints. Original error: {e}",
                    tag=ErrorTag.CASE_INVALID_CALLBACK_UNRESOLVABLE_HINTS
                ) from e

            callback_signature = inspect.signature(value)

            # case: Case
            if 'case' not in callback_signature.parameters:
                raise SimpleBenchTypeError(
                    f'Invalid callback: {value}. Must accept a "case" parameter.',
                    tag=ErrorTag.CASE_INVALID_CALLBACK_INCORRECT_SIGNATURE_MISSING_CASE_PARAMETER)

            case_param_type = resolved_hints.get('case')
            if case_param_type is not Case:
                raise SimpleBenchTypeError(
                    f"Invalid callback: {value}. 'case' parameter must be of type "
                    f"'simplebench.case.Case', not '{case_param_type}'.",
                    tag=ErrorTag.CASE_INVALID_CALLBACK_INCORRECT_SIGNATURE_CASE_PARAMETER_TYPE)

            case_param = callback_signature.parameters['case']
            if case_param.kind is not inspect.Parameter.KEYWORD_ONLY:
                raise SimpleBenchTypeError(
                    f'Invalid callback: {value}. "case" parameter must be a keyword-only parameter.',
                    tag=ErrorTag.CASE_INVALID_CALLBACK_INCORRECT_SIGNATURE_CASE_PARAMETER_NOT_KEYWORD_ONLY)

            # section: Section
            if 'section' not in callback_signature.parameters:
                raise SimpleBenchTypeError(
                    f'Invalid callback: {value}. Must accept a "section" parameter.',
                    tag=ErrorTag.CASE_INVALID_CALLBACK_INCORRECT_SIGNATURE_MISSING_SECTION_PARAMETER)

            section_param_type = resolved_hints.get('section')
            if section_param_type is not Section:
                raise SimpleBenchTypeError(
                    f"Invalid callback: {value}. 'section' parameter must be of type "
                    f"'simplebench.enum.Section', not '{section_param_type}'.",
                    tag=ErrorTag.CASE_INVALID_CALLBACK_INCORRECT_SIGNATURE_SECTION_PARAMETER_TYPE)

            section_param = callback_signature.parameters['section']
            if section_param.kind is not inspect.Parameter.KEYWORD_ONLY:
                raise SimpleBenchTypeError(
                    f'Invalid callback: {value}. "section" parameter must be a keyword-only parameter.',
                    tag=ErrorTag.CASE_INVALID_CALLBACK_INCORRECT_SIGNATURE_SECTION_PARAMETER_NOT_KEYWORD_ONLY)

            # output_format: Format
            if 'output_format' not in callback_signature.parameters:
                raise SimpleBenchTypeError(
                    f'Invalid callback: {value}. Must accept an "output_format" parameter.',
                    tag=ErrorTag.CASE_INVALID_CALLBACK_INCORRECT_SIGNATURE_MISSING_OUTPUT_FORMAT_PARAMETER)
            output_format_param_type = resolved_hints.get('output_format')
            if output_format_param_type is not Format:
                raise SimpleBenchTypeError(
                    f"Invalid callback: {value}. 'output_format' parameter must be of type "
                    f"'simplebench.enum.Format', not '{output_format_param_type}'.",
                    tag=ErrorTag.CASE_INVALID_CALLBACK_INCORRECT_SIGNATURE_OUTPUT_FORMAT_PARAMETER_TYPE)

            format_param = callback_signature.parameters['output_format']
            if format_param.kind is not inspect.Parameter.KEYWORD_ONLY:
                raise SimpleBenchTypeError(
                    f'Invalid callback: {value}. "output_format" parameter must be a keyword-only parameter.',
                    tag=ErrorTag.CASE_INVALID_CALLBACK_INCORRECT_SIGNATURE_OUTPUT_FORMAT_PARAMETER_NOT_KEYWORD_ONLY)

            # output: Any
            if 'output' not in callback_signature.parameters:
                raise SimpleBenchTypeError(
                    f'Invalid callback: {value}. Must accept a "output" parameter (any type).',
                    tag=ErrorTag.CASE_INVALID_CALLBACK_INCORRECT_SIGNATURE_MISSING_OUTPUT_PARAMETER)

            output_param_type = resolved_hints.get('output')
            if output_param_type is not Any:
                raise SimpleBenchTypeError(
                    f"Invalid callback: {value}. 'output' parameter must be of type "
                    f"'Any', not '{output_param_type}'.",
                    tag=ErrorTag.CASE_INVALID_CALLBACK_INCORRECT_SIGNATURE_OUTPUT_PARAMETER_TYPE)

            output_param = callback_signature.parameters['output']
            if output_param.kind is not inspect.Parameter.KEYWORD_ONLY:
                raise SimpleBenchTypeError(
                    f'Invalid callback: {value}. "output" parameter must be a keyword-only parameter.',
                    tag=ErrorTag.CASE_INVALID_CALLBACK_INCORRECT_SIGNATURE_OUTPUT_PARAMETER_NOT_KEYWORD_ONLY)
            params = list(callback_signature.parameters.values())
            if len(params) != 4:
                raise SimpleBenchTypeError(
                    f'Invalid callback: {value}. Must accept exactly four parameters with the following types: '
                    'Case, Section, Format, and a value of Any type.',
                    tag=ErrorTag.CASE_INVALID_CALLBACK_INCORRECT_NUMBER_OF_PARAMETERS)
        self._callback = value

    @property
    def results(self) -> list[Results]:
        '''The benchmark list of Results for the case.'''
        return self._results

    @property
    def options(self) -> list[ReporterOption]:
        '''A list of additional options for the benchmark case.'''
        return self._options if self._options is not None else []

    @options.setter
    def options(self, value: list[ReporterOption]) -> None:
        if self._readonly:
            raise SimpleBenchAttributeError(
                'options attribute is read-only.',
                name='options', obj=self, tag=ErrorTag.CASE_MODIFY_READONLY_OPTIONS
            )
        if not isinstance(value, list):
            raise SimpleBenchTypeError(
                f'Invalid options: {value}. Must be a list.',
                tag=ErrorTag.CASE_INVALID_OPTIONS_NOT_LIST
                )
        for option in value:
            if not isinstance(option, ReporterOption):
                raise SimpleBenchTypeError(
                    f'Invalid option: {option}. Must be of type ReporterOption or a sub-class.',
                    tag=ErrorTag.CASE_INVALID_OPTIONS_ENTRY_NOT_REPORTER_OPTION
                    )
        self._options = value

    def validate_time_range(self) -> None:
        """Validate that min_time < max_time for the case.

        Raises:
            SimpleBenchValueError: If any of the parameters are invalid.
            SimpleBenchTypeError: If any of the parameters are of the wrong type.
        """
        if self.min_time > self.max_time:
            raise SimpleBenchValueError(
                f'Invalid time range: min_time {self.min_time} > max_time {self.max_time}.',
                tag=ErrorTag.CASE_INVALID_TIME_RANGE)

    @property
    def expanded_kwargs_variations(self) -> list[dict[str, Any]]:
        '''All combinations of keyword arguments from the specified kwargs_variations.

        Returns:
            A list of dictionaries, each representing a unique combination of keyword arguments.
        '''
        keys = self.kwargs_variations.keys()
        values = [self.kwargs_variations[key] for key in keys]
        return [dict(zip(keys, v)) for v in itertools.product(*values)]

    def run(self, session: Optional[Session] = None) -> None:
        """Run the benchmark tests.

        This method will execute the benchmark for each combination of
        keyword arguments and collect the results. After running the
        benchmarks, the results will be stored in the `self.results` attribute.

        If passed, the session's tasks will be used to display progress,
        control verbosity, and pass CLI arguments to the benchmark runner.

        Args:
            session (Optional[Session]): The session to use for the benchmark case.
        """
        all_variations = self.expanded_kwargs_variations
        task_name: str = 'case_variations'
        task: RichTask | None = None
        if session and session.show_progress and session.tasks:
            task = session.tasks.get(task_name)
            if not task:
                task = session.tasks.new_task(
                    name=task_name,
                    description=f'[cyan] Running case {self.title}',
                    completed=0,
                    total=len(all_variations))
        if task:
            task.reset()
        kwargs: dict[str, Any]
        for variations_counter, kwargs in enumerate(all_variations):
            bench: SimpleRunner
            if self.runner:
                bench = self.runner(case=self, session=session, kwargs=kwargs)
            elif session and session.default_runner:
                bench = session.default_runner(case=self, session=session, kwargs=kwargs)
            else:
                bench = SimpleRunner(case=self, session=session, kwargs=kwargs)
            try:
                results: Results = self.action(bench, **kwargs)
            except Exception as e:
                raise SimpleBenchRuntimeError(
                    f'Error running benchmark action {str(self.action)} for case '
                    f'"{self.title}" with kwargs {kwargs}: {e}, {type(e)}',
                    tag=ErrorTag.CASE_BENCHMARK_ACTION_RAISED_EXCEPTION
                    ) from e
            self.results.append(results)
            if task:
                task.update(
                        description=(f'[cyan] Running case {self.title} '
                                     f'({variations_counter + 1}/{len(all_variations)})'),
                        completed=variations_counter + 1,
                        refresh=True)
        if task:
            task.stop()

    def as_dict(self, full_data: bool = False) -> dict[str, Any]:
        """Returns the benchmark case and results as a JSON serializable dict.

        Only the results statistics are included by default. To include full results data,
        set `full_data` to True.

        Args:
            full_data (bool): Whether to include full results data. Defaults to False.

        Returns:
            dict[str, Any]: A JSON serializable dict representation of the benchmark case and results.
        """
        results = []
        for result in self.results:
            if full_data:  # full data if requested
                results.append(result.results_and_data_as_dict)
            else:  # otherwise only stats
                results.append(result.results_as_dict)
        return {
            'type': self.__class__.__name__,
            'group': self.group,
            'title': self.title,
            'description': self.description,
            'variation_cols': self.variation_cols,
            'results': results
        }

    def section_mean(self, section: Section) -> float:
        """Calculate the mean value for a specific section across all results.

        This method computes the mean value for the specified section
        (either OPS or TIMING) across all benchmark results associated with this case.

        This is a very 'hand-wavy' mean calculation that simply averages
        the means of each result. It does not take into account the number
        of iterations or other statistical factors. It is intended to provide
        a rough estimate of the overall performance for the specified section for
        use in comparisons between successive benchmark runs in tests looking for
        large performance regressions. As such, it should not be used for any rigorous
        statistical analysis.

        Args:
            section (Section): The section for which to calculate the mean.

        Returns:
            float: The mean value for the specified section.
        """
        if not isinstance(section, Section):
            raise SimpleBenchTypeError(
                f'Invalid section type: {type(section)}. Must be of type Section.',
                tag=ErrorTag.CASE_SECTION_MEAN_INVALID_SECTION_TYPE_ARGUMENT
                )
        if section not in (Section.OPS, Section.TIMING):
            raise SimpleBenchValueError(
                f'Invalid section: {section}. Must be Section.OPS or Section.TIMING.',
                tag=ErrorTag.CASE_SECTION_MEAN_INVALID_SECTION_ARGUMENT
                )

        if not self.results:
            return 0.0
        total = 0.0
        count = 0
        for result in self.results:
            if section == Section.OPS:
                total += result.ops_per_second.mean
                count += 1
            elif section == Section.TIMING:
                total += result.per_round_timings.mean
                count += 1
        return total / count if count > 0 else 0.0
